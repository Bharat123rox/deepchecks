window.Deepchecks = window.Deepchecks || {};
window.Deepchecks.loadPlotly = () => new Promise(async (resolve, reject) => {
    try {
        const plotlyCdn = '$plotlyCdn';
        const loadPlotlyScript = () => new Promise((resolve, reject) => {
            const scriptTag = document.createElement('script');
            document.head.appendChild(scriptTag);
            scriptTag.async = true;
            scriptTag.onload = () => resolve(scriptTag);
            scriptTag.onerror = () => reject(new Error(`Failed to load plotly script`));
            scriptTag.src = plotlyCdn + '.js';
        });
        if (window.Plotly === undefined || window.Plotly === null) {
            if (typeof define === "function" && define.amd) {
                const exist = (Plotly) => {
                    window.Plotly = Plotly;
                    resolve(Plotly);
                };
                const failure = (e) => {
                    console.dir(e);
                    reject(new Error(`Failed to load plotly library: ${e.message}`));
                };
                requirejs.config({paths: {'plotly': [plotlyCdn]}});
                require(['plotly'], exist, failure);
            } else {
                try {
                    await loadPlotlyScript();
                    resolve(Plotly);
                } catch(error) {
                    console.dir(error);
                    reject(new Error(`Failed to load plotly library: ${e.message}`));
                }
            }
        } else {
            resolve(window.Plotly);
        }
    } catch(error) {
        reject(error);
    }
});

if (window.Deepchecks.loadPlotlyDependency === undefined || window.Deepchecks.loadPlotlyDependency === null) {
    console.log('No Plotly library, loading it');
    window.Deepchecks.loadPlotlyDependency = window.Deepchecks.loadPlotly();
} else {
    console.log('Plotly load promise already exists');
}